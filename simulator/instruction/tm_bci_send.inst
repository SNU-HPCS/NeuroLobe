IF GV.sim_params['use_partial'][gtask_id]==False
loop_unit(reg_addr1 = 22, unit_name = 'template')
    rmw_op(func_type = 'pop', access_type = 'htoh', src_mem = 'P1', dst_mem = 'P1', reg_addr1 = 22, reg_addr3 = 23)
    rmw_op(func_type = 'add', access_type = 'stos', src_mem = 'template sums S1', dst_mem = 'template sums S1', reg_addr1 = 22, reg_addr3 = 23)
unit_end()
ENDIF

alui_comp(func_type = 'add', reg_addr1 = 'timestep', immediate = 1, reg_addr2 = 'timestep')
increment_pos()
set_register(reg_addr1 = 20, immediate = 0)
loop_unit(reg_addr1 = 22, unit_name = 'template')
    state_mem(memory_name = 'template constants C1', access_type = 'read', reg_addr1 = 22, reg_addr2 = 23)
    state_mem(memory_name = 'template constants C2', access_type = 'read', reg_addr1 = 22, reg_addr2 = 24)
    state_mem(memory_name = 'template constants C3', access_type = 'read', reg_addr1 = 22, reg_addr2 = 25)
    state_mem(memory_name = 'template sums S1', access_type = 'read', reg_addr1 = 22, reg_addr2 = 26)
    state_mem(memory_name = 'template sums S2', access_type = 'read', reg_addr1 = 22, reg_addr2 = 27)
    state_mem(memory_name = 'template sums S3', access_type = 'read', reg_addr1 = 22, reg_addr2 = 28)
    alur_comp(func_type = 'mul', reg_addr1 = 27, reg_addr2 = 27, reg_addr4 = 30)
    alur_comp(func_type = 'mul', reg_addr1 = 28, reg_addr2 = 23, reg_addr4 = 31)
    alur_comp(func_type = 'sub', reg_addr1 = 31, reg_addr2 = 30, reg_addr4 = 30)
    set_register(reg_addr1 = 29, immediate = np.NaN)
    if_begin(func_type = 'neq', reg_addr1 = 30, immediate = 0)
        if_begin(func_type = 'neq', reg_addr1 = 25, immediate = 0)
            alur_comp(func_type = 'mul', reg_addr1 = 23, reg_addr2 = 26, reg_addr4 = 29)
            alur_comp(func_type = 'mul', reg_addr1 = 24, reg_addr2 = 27, reg_addr4 = 23)
            alur_comp(func_type = 'sub', reg_addr1 = 29, reg_addr2 = 23, reg_addr4 = 29)
            alur_comp(func_type = 'mul', reg_addr1 = 29, reg_addr2 = 29, reg_addr4 = 29)
            alur_comp(func_type = 'div', reg_addr1 = 29, reg_addr2 = 30, reg_addr4 = 29)
            alur_comp(func_type = 'div', reg_addr1 = 29, reg_addr2 = 25, reg_addr4 = 29)
        if_end()
    if_end()
    if_begin(func_type = 'ge', reg_addr1 = 'timestep', const_name = 'temp_width')
        probe(reg_addr1 = 22, reg_addr2 = 29)
        IF GV.DEBUG==True
        alui_comp(func_type = 'sub', reg_addr1 = 'timestep', const_name = 'temp_width', reg_addr2 = 31)
        debug_func(func_type = self.debug_module.save_tm_corr, module = self.debug_module, reg_addr1 = 22, reg_addr2 = 29, reg_addr3 = 31)
        ENDIF
        rmw_op(func_type = 'pop', access_type = 'htoh', src_mem = 'R2', dst_mem = 'R2', reg_addr1 = 22, reg_addr3 = 32)
        rmw_op(func_type = 'pop', access_type = 'htoh', src_mem = 'R3', dst_mem = 'R3', reg_addr1 = 22, reg_addr3 = 33)
        alur_comp(func_type = 'sub', reg_addr1 = 27, reg_addr2 = 32, reg_addr4 = 27)
        alur_comp(func_type = 'sub', reg_addr1 = 28, reg_addr2 = 33, reg_addr4 = 28)
        state_mem(memory_name = 'template sums S2', access_type = 'write', reg_addr1 = 22, reg_addr2 = 27)
        state_mem(memory_name = 'template sums S3', access_type = 'write', reg_addr1 = 22, reg_addr2 = 28)
    if_end()
    
    state_mem(memory_name = 'template sums S1', access_type = 'write', reg_addr1 = 22, reg_addr2 = 20)
unit_end()

loop_unit(reg_addr1 = 29, unit_name = 'neuron')
    state_mem(memory_name = 'neuron i_n', access_type = 'write', reg_addr1 = 29, reg_addr2 = 20)
unit_end()
