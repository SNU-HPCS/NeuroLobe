const0 = set_register(immediate = imm0)
nid = loop_unit(unit_name = neuron)
IF PARTIAL
    ext_waccum = memory(access_type = 'read', mem_type = hist_mem['ext_weight_accum', nid])
    memory(access_type = 'write', mem_type = hist_mem['ext_weight_accum', nid], reg_data = const0)

    waccum = memory(access_type = 'read', mem_type = hist_mem['weight_accum', nid])
    memory(access_type = 'write', mem_type = hist_mem['weight_accum', nid], reg_data = const0)
    waccum = alu_comp(ext_waccum + waccum)
ENDIF
IF NO_PARTIAL
    waccum = memory(access_type = 'read', mem_type = hist_mem['weight_accum', nid])
    memory(access_type = 'write', mem_type = hist_mem['weight_accum', nid], reg_data = const0)
ENDIF

    refr = memory(access_type = 'read', mem_type = state_mem['neuron_states_refr', nid])
    if_begin(refr == imm0)
        I_t = memory(access_type = 'read', mem_type = state_mem['neuron_states_I_t', nid])
        waccum = alu_comp(waccum + I_t)
IF PARTIAL
        event_trigger(packet_type = 'nn_spike', reg_addr0 = nid, reg_addr1 = waccum, condition = 'waccum > imm0')
ENDIF
IF NO_PARTIAL
        event_trigger(packet_type = 'nn_spike_direct', reg_addr0 = nid, reg_addr1 = waccum, condition = 'waccum > imm0')
ENDIF
        probe(reg_addr0 = nid, reg_addr1 = waccum)
        debug_func(func_type = self.debug_module.save_snn_state, module = self.debug_module, reg_addr0 = waccum, reg_addr1 = timestep, reg_addr2 = nid)
        if_begin(waccum > imm0)
            debug_func(func_type = self.debug_module.save_snn_spike, module = self.debug_module, reg_addr0 = waccum, reg_addr1 = timestep, reg_addr2 = nid)
        if_end()
    if_end()
    if_begin(refr > imm0)
        refr = alu_comp(refr - imm1)
        memory(access_type = 'write', mem_type = state_mem['neuron_states_refr', nid], reg_data = refr)
    if_end()
unit_end()
